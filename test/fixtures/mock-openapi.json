{
  "openapi": "3.0.0",
  "info": {
    "title": "Test API",
    "version": "1.0.0",
    "description": "Mock API for testing risky OpenAPI features"
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "required": ["id", "name"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "phone": {
            "type": "string",
            "pattern": "^\\+?[1-9]\\d{1,14}$"
          },
          "age": {
            "type": "integer",
            "minimum": 0,
            "maximum": 150
          },
          "score": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "multipleOf": 0.5
          },
          "status": {
            "oneOf": [
              { "type": "string", "enum": ["active", "inactive"] },
              { "type": "null" }
            ]
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfile"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "minItems": 0,
            "maxItems": 10,
            "uniqueItems": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "preferences": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "birth_date": {
            "type": "string",
            "format": "date"
          },
          "website": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "UserProfile": {
        "type": "object",
        "properties": {
          "bio": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/UserSettings"
          }
        }
      },
      "UserSettings": {
        "type": "object",
        "properties": {
          "theme": {
            "type": "string",
            "enum": ["light", "dark", "auto"]
          },
          "notifications": {
            "type": "boolean"
          }
        }
      },
      "Tag": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string"
          },
          "color": {
            "type": "string"
          }
        }
      },
      "CreateUserRequest": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfile"
          }
        }
      },
      "SearchResponse": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "total": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          }
        }
      },
      "ValidationTestSchema": {
        "type": "object",
        "required": ["stringField", "numberField"],
        "properties": {
          "stringField": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "pattern": "^[a-zA-Z0-9_-]+$"
          },
          "emailField": {
            "type": "string",
            "format": "email"
          },
          "dateTimeField": {
            "type": "string",
            "format": "date-time"
          },
          "dateField": {
            "type": "string",
            "format": "date"
          },
          "uriField": {
            "type": "string",
            "format": "uri"
          },
          "uuidField": {
            "type": "string",
            "format": "uuid"
          },
          "numberField": {
            "type": "number",
            "minimum": 0,
            "maximum": 1000,
            "multipleOf": 0.1
          },
          "integerField": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100
          },
          "exclusiveRangeField": {
            "type": "number",
            "exclusiveMinimum": 0,
            "exclusiveMaximum": 10
          },
          "arrayField": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "maxItems": 5,
            "uniqueItems": true
          },
          "enumField": {
            "type": "string",
            "enum": ["option1", "option2", "option3"]
          },
          "numberEnumField": {
            "type": "number",
            "enum": [1, 2, 3, 5, 8]
          },
          "nullableField": {
            "type": ["string", "null"]
          },
          "unionField": {
            "oneOf": [
              { "type": "string" },
              { "type": "number" },
              { "type": "boolean" }
            ]
          },
          "anyOfField": {
            "anyOf": [
              { "type": "string", "minLength": 5 },
              { "type": "number", "minimum": 10 }
            ]
          },
          "allOfField": {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "name": { "type": "string" }
                },
                "required": ["name"]
              },
              {
                "type": "object",
                "properties": {
                  "age": { "type": "number" }
                },
                "required": ["age"]
              }
            ]
          },
          "strictObject": {
            "type": "object",
            "properties": {
              "prop1": { "type": "string" }
            },
            "additionalProperties": false
          },
          "passthroughObject": {
            "type": "object",
            "properties": {
              "prop1": { "type": "string" }
            },
            "additionalProperties": true
          },
          "catchallObject": {
            "type": "object",
            "properties": {
              "prop1": { "type": "string" }
            },
            "additionalProperties": {
              "type": "number"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/users": {
      "get": {
        "summary": "List users with complex query parameters",
        "parameters": [
          {
            "name": "include[]",
            "in": "query",
            "description": "Array parameter with special characters",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["profile", "tags", "settings"]
              }
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Nested filter parameter",
            "schema": {
              "type": "string",
              "enum": ["active", "inactive", "pending"]
            }
          },
          {
            "name": "sort-by",
            "in": "query",
            "description": "Parameter with hyphen",
            "schema": {
              "type": "string",
              "enum": ["name", "created_at", "updated_at"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "summary": "Get user by ID",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include[]",
            "in": "query",
            "description": "Include related data",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["profile", "tags"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "summary": "Update user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted"
          }
        }
      }
    },
    "/users/{user_id}/profile": {
      "get": {
        "summary": "Get user profile",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "summary": "Search with complex parameters",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields[]",
            "in": "query",
            "description": "Fields to search in",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["name", "email", "bio"]
              }
            }
          },
          {
            "name": "filters[created_after]",
            "in": "query",
            "description": "Filter by creation date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filters[tags.name]",
            "in": "query",
            "description": "Filter by tag name with dot notation",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/validation-test": {
      "post": {
        "summary": "Test endpoint for comprehensive validation features",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidationTestSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Validation test successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationTestSchema"
                }
              }
            }
          }
        }
      }
    }
  }
}
